@page "/planes"
@using DTOs
@using API.Planes
@using API.Especialidades
@inject IJSRuntime JSRuntime
@using BlazorWebAssembly.Components
@inject NavigationManager Navigation

<PageTitle>Planes</PageTitle>

<div class="container-fluid">
    <div class="row">
        <div class="col-12">
            <div class="card shadow-sm">
                <div class="card-header bg-primary text-white">
                    <h4 class="mb-0">
                        <i class="fas fa-scroll me-2"></i>
                        Planes
                    </h4>
                </div>
                <div class="card-body">
                    @if (!string.IsNullOrEmpty(errorMessage))
                    {
                        <div class="alert alert-danger alert-dismissible fade show" role="alert">
                            <i class="fas fa-exclamation-triangle me-2"></i>@errorMessage
                            <button type="button" class="btn-close" @onclick="() => errorMessage = string.Empty"></button>
                        </div>
                    }

                    @if (!string.IsNullOrEmpty(successMessage))
                    {
                        <div class="alert alert-success alert-dismissible fade show" role="alert">
                            <i class="fas fa-check-circle me-2"></i>@successMessage
                            <button type="button" class="btn-close" @onclick="() => successMessage = string.Empty"></button>
                        </div>
                    }

                    @if (loading)
                    {
                        <div class="d-flex justify-content-center align-items-center" style="min-height: 300px;">
                            <div class="spinner-border text-primary" role="status">
                                <span class="visually-hidden">Cargando...</span>
                            </div>
                        </div>
                    }
                    else
                    {
                        <div class="table-responsive" style="max-height: 500px; overflow-y: auto;">
                            <table class="table table-striped table-hover table-bordered">
                                <thead class="table-dark sticky-top">
                                    <tr>
                                        <th>IdPlan</th>
                                        <th>Descripción</th>
                                        <th>Especialidad</th> 
                                    </tr>
                                </thead>
                                <tbody>
                                    @if (planes != null && planes.Any())
                                    {
                                        @foreach (var plan in planes)
                                        {
                                            var especialidadDesc = especialidades?.FirstOrDefault(e => e.IdEspecialidad == plan.IdEspecialidad)?.Descripcion ?? "Sin especialidad";
                                            <tr @onclick="() => SelectPlan(plan)"
                                                class="@(selectedPlan?.IdPlan == plan.IdPlan ? "table-active" : "")"
                                                style="cursor: pointer;">
                                                <td>@plan.IdPlan</td>
                                                <td>@plan.Descripcion</td>
                                                <td>@especialidadDesc</td> 
                                            </tr>
                                        }
                                    }
                                    else
                                    {
                                        <tr>
                                            <td colspan="3" class="text-center text-muted py-4">
                                                <i class="fas fa-inbox fa-2x mb-2"></i>
                                                <p class="mb-0">No hay planes registrados</p>
                                            </td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>

                        <div class="d-flex justify-content-start gap-2 mt-3 border-top pt-3">
                            <button class="btn btn-outline-primary" @onclick="RefreshPlanes">
                                <i class="fas fa-sync-alt me-2"></i>Refrescar
                            </button>
                            <button class="btn btn-outline-success" @onclick="AgregarPlan">
                                <i class="fas fa-plus me-2"></i>Agregar
                            </button>
                            <button class="btn btn-outline-warning" disabled="@(selectedPlan == null)" @onclick="ModificarPlan">
                                <i class="fas fa-edit me-2"></i>Modificar
                            </button>
                            <button class="btn btn-outline-danger" disabled="@(selectedPlan == null)" @onclick="EliminarPlan">
                                <i class="fas fa-trash-alt me-2"></i>Eliminar
                            </button>
                        </div>

                        @if (selectedPlan != null)
                        {
                            <div class="alert alert-info mt-3">
                                <strong>Plan seleccionado:</strong> @selectedPlan.Descripcion (@selectedPlan.IdPlan)
                            </div>
                        }
                    }
                </div>
            </div>
        </div>
    </div>
</div>

@if (showDetalle)
{
    <PlanDetalle Plan="@planDetalle"
                 IsEditMode="@isEditMode"
                 OnSave="@HandleSave"
                 OnCancel="@HandleCancel" />
}

@if (showDeleteConfirm)
{
    <div class="modal fade show d-block" tabindex="-1" style="background-color: rgba(0,0,0,0.5);">
        <div class="modal-dialog modal-dialog-centered">
            <div class="modal-content">
                <div class="modal-header bg-danger text-white">
                    <h5 class="modal-title"><i class="fas fa-exclamation-triangle me-2"></i>Confirmar eliminación</h5>
                    <button type="button" class="btn-close btn-close-white" @onclick="CancelDelete"></button>
                </div>
                <div class="modal-body">
                    <p>¿Está seguro de eliminar el plan <strong>@selectedPlan?.Descripcion</strong>?</p>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="CancelDelete" disabled="@isDeleting">Cancelar</button>
                    <button type="button" class="btn btn-danger" @onclick="ConfirmDelete" disabled="@isDeleting">
                        @if (isDeleting)
                        {
                            <span class="spinner-border spinner-border-sm me-2"></span>
                        }
                        Eliminar
                    </button>
                </div>
            </div>
        </div>
    </div>
}

@code {
    private List<PlanDTO>? planes;
    private List<EspecialidadDTO>? especialidades;
    private PlanDTO? selectedPlan;
    private PlanDTO planDetalle = new();
    private bool loading = true;
    private bool showDetalle = false;
    private bool isEditMode = false;
    private bool showDeleteConfirm = false;
    private bool isDeleting = false;
    private string errorMessage = string.Empty;
    private string successMessage = string.Empty;

    protected override async Task OnInitializedAsync() => await LoadPlanes();

    private async Task LoadPlanes()
    {
        try
        {
            loading = true;
            planes = (await PlanApiClient.GetAllAsync())?.ToList();
            especialidades = (await EspecialidadApiClient.GetAllAsync())?.ToList(); 
            selectedPlan = null;
        }
        catch (Exception ex)
        {
            errorMessage = $"Error al cargar planes: {ex.Message}";
        }
        finally
        {
            loading = false;
        }
    }

    private void SelectPlan(PlanDTO plan) =>
        selectedPlan = selectedPlan?.IdPlan == plan.IdPlan ? null : plan;

    private async Task RefreshPlanes()
    {
        await LoadPlanes();
        successMessage = "Lista actualizada correctamente";
    }

    private void AgregarPlan()
    {
        planDetalle = new();
        isEditMode = false;
        showDetalle = true;
    }

    private async Task ModificarPlan()
    {
        if (selectedPlan == null) return;
        try
        {
            loading = true;
            errorMessage = string.Empty;

            var plan = await PlanApiClient.GetAsync(selectedPlan.IdPlan);
            if (plan != null)
            {
                planDetalle = plan;
                isEditMode = true;
                showDetalle = true;
            }
            else
            {
                errorMessage = "No se encontró el plan seleccionado.";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Error al cargar plan: {ex.Message}";
        }
        finally
        {
            loading = false;
        }
    }

    private void EliminarPlan() => showDeleteConfirm = true;

    private async Task ConfirmDelete()
    {
        try
        {
            isDeleting = true;
            await PlanApiClient.DeleteAsync(selectedPlan!.IdPlan);
            successMessage = "Plan eliminado correctamente";
            showDeleteConfirm = false;
            await LoadPlanes();
        }
        catch (Exception ex)
        {
            errorMessage = $"Error al eliminar plan: {ex.Message}";
        }
        finally
        {
            isDeleting = false;
        }
    }

    private void CancelDelete() => showDeleteConfirm = false;

    private async Task HandleSave()
    {
        showDetalle = false;
        successMessage = isEditMode ? "Plan modificado correctamente" : "Plan agregado correctamente";
        await LoadPlanes();
    }

    private void HandleCancel() => showDetalle = false;
}