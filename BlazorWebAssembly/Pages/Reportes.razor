@page "/reportes"
@using API.Reportes
@inject IJSRuntime JS

<PageTitle>Reportes</PageTitle>

<h3>Reportes</h3>

<div class="container mt-4">
    <div class="row">
        <div class="col-md-6">
            <div class="card">
                <div class="card-body">
                    <h5 class="card-title">Reporte de Cursos</h5>
                    <p class="card-text">Genera un PDF con la cantidad de alumnos por curso.</p>
                    <button class="btn btn-primary" @onclick="GenerarReporteCursos" disabled="@isGeneratingCursos">
                        @if (isGeneratingCursos)
                        {
                            <span class="spinner-border spinner-border-sm me-2" role="status" aria-hidden="true"></span>
                            <span>Generando...</span>
                        }
                        else
                        {
                            <span>Generar Reporte</span>
                        }
                    </button>
                </div>
            </div>
        </div>

        <div class="col-md-6">
            <div class="card">
                <div class="card-body">
                    <h5 class="card-title">Reporte de Planes y Materias</h5>
                    <p class="card-text">Genera un PDF con los planes y sus materias asociadas.</p>
                    <button class="btn btn-primary" @onclick="GenerarReportePlanes" disabled="@isGeneratingPlanes">
                        @if (isGeneratingPlanes)
                        {
                            <span class="spinner-border spinner-border-sm me-2" role="status" aria-hidden="true"></span>
                            <span>Generando...</span>
                        }
                        else
                        {
                            <span>Generar Reporte</span>
                        }
                    </button>
                </div>
            </div>
        </div>
    </div>

    @if (!string.IsNullOrEmpty(mensaje))
    {
        <div class="alert @(esError ? "alert-danger" : "alert-success") mt-3" role="alert">
            @mensaje
        </div>
    }
</div>

@code {
    private bool isGeneratingCursos = false;
    private bool isGeneratingPlanes = false;
    private string mensaje = "";
    private bool esError = false;

    private async Task GenerarReporteCursos()
    {
        try
        {
            isGeneratingCursos = true;
            mensaje = "";
            StateHasChanged();

            var pdfBytes = await ReportesApiClient.GetReporteCursosAsync();
            var fileName = $"Reporte_Cursos_{DateTime.Now:yyyyMMdd_HHmmss}.pdf";
            await DescargarArchivo(pdfBytes, fileName);

            mensaje = "Reporte de cursos generado exitosamente";
            esError = false;
        }
        catch (Exception ex)
        {
            mensaje = $"Error al generar el reporte: {ex.Message}";
            esError = true;
        }
        finally
        {
            isGeneratingCursos = false;
            StateHasChanged();
        }
    }

    private async Task GenerarReportePlanes()
    {
        try
        {
            isGeneratingPlanes = true;
            mensaje = "";
            StateHasChanged();

            var pdfBytes = await ReportesApiClient.GetReportePlanesAsync();
            var fileName = $"Reporte_Planes_{DateTime.Now:yyyyMMdd_HHmmss}.pdf";
            await DescargarArchivo(pdfBytes, fileName);

            mensaje = "Reporte de planes y materias generado exitosamente";
            esError = false;
        }
        catch (Exception ex)
        {
            mensaje = $"Error al generar el reporte: {ex.Message}";
            esError = true;
        }
        finally
        {
            isGeneratingPlanes = false;
            StateHasChanged();
        }
    }

    private async Task DescargarArchivo(byte[] fileBytes, string fileName)
    {
        var base64 = Convert.ToBase64String(fileBytes);
        await JS.InvokeVoidAsync("downloadFile", fileName, base64);
    }
}