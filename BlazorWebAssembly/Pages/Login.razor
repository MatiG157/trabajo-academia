@page "/login"
@layout EmptyLayout
@using API.Usuarios
@using API.Personas
@using DTOs
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime

<PageTitle>Login - Sistema Académico</PageTitle>

<div class="container">
    <div class="row justify-content-center align-items-center" style="min-height: 100vh;">
        <div class="col-md-5">
            <div class="card shadow-lg">
                <div class="card-header bg-primary text-white text-center py-3">
                    <h3 class="mb-0">
                        <i class="fas fa-graduation-cap me-2"></i>
                        Sistema Académico
                    </h3>
                    <p class="mb-0 mt-2">Iniciar Sesión</p>
                </div>
                <div class="card-body p-4">
                    <EditForm Model="@loginModel" OnValidSubmit="@HandleLogin">
                        <DataAnnotationsValidator />

                        <div class="form-group mb-3">
                            <label for="email" class="form-label">
                                <i class="fas fa-envelope me-1"></i>Email:
                            </label>
                            <InputText id="email"
                                       class="form-control form-control-lg"
                                       @bind-Value="loginModel.Email"
                                       placeholder="Ingrese su email"
                                       disabled="@isLoading" />
                            <ValidationMessage For="@(() => loginModel.Email)" class="text-danger" />
                        </div>

                        <div class="form-group mb-3">
                            <label for="password" class="form-label">
                                <i class="fas fa-lock me-1"></i>Contraseña:
                            </label>
                            <InputText id="password"
                                       type="password"
                                       class="form-control form-control-lg"
                                       @bind-Value="loginModel.Password"
                                       placeholder="Ingrese su contraseña"
                                       disabled="@isLoading" />
                            <ValidationMessage For="@(() => loginModel.Password)" class="text-danger" />
                        </div>

                        @if (!string.IsNullOrEmpty(errorMessage))
                        {
                            <div class="alert alert-danger alert-dismissible fade show" role="alert">
                                <i class="fas fa-exclamation-triangle me-2"></i>
                                @errorMessage
                                <button type="button" class="btn-close" @onclick="() => errorMessage = string.Empty"></button>
                            </div>
                        }

                        <div class="d-grid gap-2 mt-4">
                            <button type="submit" class="btn btn-primary btn-lg" disabled="@isLoading">
                                @if (isLoading)
                                {
                                    <span class="spinner-border spinner-border-sm me-2" role="status"></span>
                                    <span>Validando...</span>
                                }
                                else
                                {
                                    <i class="fas fa-sign-in-alt me-2"></i>
                                    <span>Ingresar</span>
                                }
                            </button>
                        </div>
                    </EditForm>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private LoginModel loginModel = new();
    private string errorMessage = "";
    private bool isLoading = false;

    private async Task HandleLogin()
    {
        try
        {
            isLoading = true;
            errorMessage = "";

            if (string.IsNullOrWhiteSpace(loginModel.Email) || string.IsNullOrWhiteSpace(loginModel.Password))
            {
                errorMessage = "Email y contraseña son requeridos";
                return;
            }

            var usuario = await UsuarioApiClient.Login(loginModel.Email, loginModel.Password);

            if (usuario != null)
            {

                var persona = await PersonaApiClient.GetAsync(usuario.IdPersona);

                if (persona != null)
                {
                 
                    await JSRuntime.InvokeVoidAsync("localStorage.setItem", "usuarioId", usuario.IdUsuario.ToString());
                    await JSRuntime.InvokeVoidAsync("localStorage.setItem", "personaId", persona.IdPersona.ToString());
                    await JSRuntime.InvokeVoidAsync("localStorage.setItem", "tipoPersona", persona.TipoPersona);
                    await JSRuntime.InvokeVoidAsync("localStorage.setItem", "nombreUsuario", $"{usuario.Nombre} {usuario.Apellido}");

                    if (persona.TipoPersona == "Docente")
                    {
                        Navigation.NavigateTo("/home-docente", true);
                    }
                    else if (persona.TipoPersona == "Alumno")
                    {
                        Navigation.NavigateTo("/home-alumno", true);
                    }
                    else
                    {

                        Navigation.NavigateTo("/home", true);
                    }
                }
                else
                {
                    errorMessage = "No se pudo obtener información de la persona";
                }
            }
            else
            {
                errorMessage = "Email o contraseña incorrectos";
            }
        }
        catch (HttpRequestException ex)
        {
            errorMessage = $"Error de conexión con el servidor: {ex.Message}";
        }
        catch (Exception ex)
        {
            errorMessage = $"Error inesperado: {ex.Message}";
        }
        finally
        {
            isLoading = false;
        }
    }

    public class LoginModel
    {
        [System.ComponentModel.DataAnnotations.Required(ErrorMessage = "El email es requerido")]
        [System.ComponentModel.DataAnnotations.EmailAddress(ErrorMessage = "Email inválido")]
        public string Email { get; set; } = "";

        [System.ComponentModel.DataAnnotations.Required(ErrorMessage = "La contraseña es requerida")]
        public string Password { get; set; } = "";
    }
}