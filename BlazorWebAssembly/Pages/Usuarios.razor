@page "/usuarios"
@using DTOs
@using API.Usuarios
@using BlazorWebAssembly.Components
@inject IJSRuntime JSRuntime
@inject NavigationManager Navigation

<PageTitle>Usuarios</PageTitle>

<div class="container-fluid">
    <div class="row">
        <div class="col-12">
            <div class="card shadow-sm">
                <div class="card-header bg-primary text-white">
                    <h4 class="mb-0">
                        <i class="fas fa-users me-2"></i>
                        Usuarios
                    </h4>
                </div>
                <div class="card-body">
                    @if (!string.IsNullOrEmpty(errorMessage))
                    {
                        <div class="alert alert-danger alert-dismissible fade show" role="alert">
                            <i class="fas fa-exclamation-triangle me-2"></i>
                            @errorMessage
                            <button type="button" class="btn-close" @onclick="() => errorMessage = string.Empty"></button>
                        </div>
                    }

                    @if (!string.IsNullOrEmpty(successMessage))
                    {
                        <div class="alert alert-success alert-dismissible fade show" role="alert">
                            <i class="fas fa-check-circle me-2"></i>
                            @successMessage
                            <button type="button" class="btn-close" @onclick="() => successMessage = string.Empty"></button>
                        </div>
                    }

                    @if (loading)
                    {
                        <div class="d-flex justify-content-center align-items-center" style="min-height: 400px;">
                            <div class="spinner-border text-primary" role="status">
                                <span class="visually-hidden">Cargando...</span>
                            </div>
                        </div>
                    }
                    else
                    {
                        <div class="table-responsive" style="max-height: 500px; overflow-y: auto;">
                            <table class="table table-striped table-hover table-bordered">
                                <thead class="table-dark sticky-top">
                                    <tr>
                                        <th style="width: 80px;">IdUsuario</th>
                                        <th>NombreUsuario</th>
                                        <th style="width: 100px;">Clave</th>
                                        <th style="width: 120px;">Habilitado</th>
                                        <th>Nombre</th>
                                        <th>Apellido</th>
                                        <th>Email</th>
                                        <th style="width: 120px;">CambiaClave</th>
                                        <th style="width: 100px;">IdPersona</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @if (usuarios != null && usuarios.Any())
                                    {
                                        @foreach (var usuario in usuarios)
                                        {
                                            <tr @onclick="() => SelectUsuario(usuario)"
                                                class="@(selectedUsuario?.IdUsuario == usuario.IdUsuario ? "table-active" : "")"
                                                style="cursor: pointer;">
                                                <td>@usuario.IdUsuario</td>
                                                <td>@usuario.NombreUsuario</td>
                                                <td>@usuario.Clave</td>
                                                <td class="text-center">
                                                    @if (usuario.Habilitado)
                                                    {
                                                        <i class="fas fa-check-circle text-success"></i>
                                                    }
                                                    else
                                                    {
                                                        <i class="fas fa-times-circle text-danger"></i>
                                                    }
                                                </td>
                                                <td>@usuario.Nombre</td>
                                                <td>@usuario.Apellido</td>
                                                <td>@usuario.Email</td>
                                                <td class="text-center">
                                                    @if (usuario.CambiaClave)
                                                    {
                                                        <i class="fas fa-check-circle text-warning"></i>
                                                    }
                                                    else
                                                    {
                                                        <i class="fas fa-times-circle text-secondary"></i>
                                                    }
                                                </td>
                                                <td>@usuario.IdPersona</td>
                                            </tr>
                                        }
                                    }
                                    else
                                    {
                                        <tr>
                                            <td colspan="9" class="text-center text-muted py-4">
                                                <i class="fas fa-inbox fa-2x mb-2"></i>
                                                <p class="mb-0">No hay usuarios registrados</p>
                                            </td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>

                        <!-- Botones de acción -->
                        <div class="d-flex justify-content-start gap-2 mt-3 border-top pt-3">
                            <button class="btn btn-outline-primary" @onclick="RefreshUsuarios">
                                <i class="fas fa-sync-alt me-2"></i>
                                Refrescar
                            </button>
                            <button class="btn btn-outline-danger"
                                    disabled="@(selectedUsuario == null)"
                                    @onclick="EliminarUsuario">
                                <i class="fas fa-trash-alt me-2"></i>
                                Eliminar
                            </button>
                            <button class="btn btn-outline-warning"
                                    disabled="@(selectedUsuario == null)"
                                    @onclick="ModificarUsuario">
                                <i class="fas fa-edit me-2"></i>
                                Modificar
                            </button>
                            <button class="btn btn-outline-success" @onclick="AgregarUsuario">
                                <i class="fas fa-plus me-2"></i>
                                Agregar
                            </button>
                        </div>

                        @if (selectedUsuario != null)
                        {
                            <div class="alert alert-info mt-3">
                                <strong>Usuario seleccionado:</strong>
                                @selectedUsuario.Nombre @selectedUsuario.Apellido (@selectedUsuario.Email)
                            </div>
                        }
                    }
                </div>
            </div>
        </div>
    </div>
</div>

@if (showDetalle)
{
    <UsuarioDetalle Usuario="@usuarioDetalle"
                    IsEditMode="@isEditMode"
                    OnSave="@HandleSave"
                    OnCancel="@HandleCancel" />
}

@if (showDeleteConfirm)
{
    <div class="modal fade show d-block" tabindex="-1" style="background-color: rgba(0,0,0,0.5);">
        <div class="modal-dialog modal-dialog-centered">
            <div class="modal-content">
                <div class="modal-header bg-danger text-white">
                    <h5 class="modal-title">
                        <i class="fas fa-exclamation-triangle me-2"></i>
                        Confirmar eliminación
                    </h5>
                    <button type="button" class="btn-close btn-close-white" @onclick="CancelDelete"></button>
                </div>
                <div class="modal-body">
                    <p class="mb-0">
                        ¿Está seguro que desea eliminar el usuario
                        <strong>@selectedUsuario?.Nombre @selectedUsuario?.Apellido</strong>
                        (ID: @selectedUsuario?.IdUsuario)?
                    </p>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="CancelDelete" disabled="@isDeleting">
                        Cancelar
                    </button>
                    <button type="button" class="btn btn-danger" @onclick="ConfirmDelete" disabled="@isDeleting">
                        @if (isDeleting)
                        {
                            <span class="spinner-border spinner-border-sm me-2"></span>
                        }
                        Eliminar
                    </button>
                </div>
            </div>
        </div>
    </div>
}

@code {
    private List<UsuarioDTO>? usuarios;
    private UsuarioDTO? selectedUsuario;
    private UsuarioDTO usuarioDetalle = new UsuarioDTO();
    private bool loading = true;
    private bool showDetalle = false;
    private bool isEditMode = false;
    private bool showDeleteConfirm = false;
    private bool isDeleting = false;
    private string errorMessage = string.Empty;
    private string successMessage = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        await LoadUsuarios();
    }

    private async Task LoadUsuarios()
    {
        try
        {
            loading = true;
            errorMessage = string.Empty;
            usuarios = (await UsuarioApiClient.GetAllAsync())?.ToList();
            selectedUsuario = null;
        }
        catch (Exception ex)
        {
            errorMessage = $"Error al cargar usuarios: {ex.Message}";
        }
        finally
        {
            loading = false;
        }
    }

    private void SelectUsuario(UsuarioDTO usuario)
    {
        selectedUsuario = selectedUsuario?.IdUsuario == usuario.IdUsuario ? null : usuario;
    }

    private async Task RefreshUsuarios()
    {
        await LoadUsuarios();
        successMessage = "Lista actualizada correctamente";
    }

    // LÓGICA AGREGAR
    private void AgregarUsuario()
    {
        usuarioDetalle = new UsuarioDTO
            {
                Habilitado = true,
                CambiaClave = false,
                IdPersona = 0
            };
        isEditMode = false;
        showDetalle = true;
    }

    // LÓGICA MODIFICAR
    private async void ModificarUsuario()
    {
        if (selectedUsuario == null) return;

        try
        {
            var usuario = await UsuarioApiClient.GetAsync(selectedUsuario.IdUsuario);
            if (usuario != null)
            {
                usuarioDetalle = usuario;
                isEditMode = true;
                showDetalle = true;
                StateHasChanged();
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Error al cargar usuario: {ex.Message}";
        }
    }

    // LÓGICA ELIMINAR
    private void EliminarUsuario()
    {
        if (selectedUsuario == null) return;
        showDeleteConfirm = true;
    }

    private async Task ConfirmDelete()
    {
        try
        {
            isDeleting = true;
            await UsuarioApiClient.DeleteAsync(selectedUsuario!.IdUsuario);
            successMessage = $"Usuario {selectedUsuario.Nombre} {selectedUsuario.Apellido} eliminado correctamente";
            showDeleteConfirm = false;
            selectedUsuario = null;
            await LoadUsuarios();
        }
        catch (Exception ex)
        {
            errorMessage = $"Error al eliminar usuario: {ex.Message}";
        }
        finally
        {
            isDeleting = false;
        }
    }

    private void CancelDelete()
    {
        showDeleteConfirm = false;
    }


    private async Task HandleSave()
    {
        showDetalle = false;
        successMessage = isEditMode ? "Usuario modificado correctamente" : "Usuario agregado correctamente";
        await LoadUsuarios();
    }

    private void HandleCancel()
    {
        showDetalle = false;
    }
}