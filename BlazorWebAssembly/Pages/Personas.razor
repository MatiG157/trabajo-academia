@page "/personas"
@using DTOs
@using API.Personas
@using API.Planes
@using BlazorWebAssembly.Components
@inject IJSRuntime JSRuntime
@inject NavigationManager Navigation

<PageTitle>Personas</PageTitle>

<div class="container-fluid">
    <div class="row">
        <div class="col-12">
            <div class="card shadow-sm">
                <div class="card-header bg-primary text-white">
                    <h4 class="mb-0">
                        <i class="fas fa-users me-2"></i>
                        Personas
                    </h4>
                </div>
                <div class="card-body">
                    @if (!string.IsNullOrEmpty(errorMessage))
                    {
                        <div class="alert alert-danger alert-dismissible fade show" role="alert">
                            <i class="fas fa-exclamation-triangle me-2"></i>
                            @errorMessage
                            <button type="button" class="btn-close" @onclick="() => errorMessage = string.Empty"></button>
                        </div>
                    }

                    @if (!string.IsNullOrEmpty(successMessage))
                    {
                        <div class="alert alert-success alert-dismissible fade show" role="alert">
                            <i class="fas fa-check-circle me-2"></i>
                            @successMessage
                            <button type="button" class="btn-close" @onclick="() => successMessage = string.Empty"></button>
                        </div>
                    }

                    @if (loading)
                    {
                        <div class="d-flex justify-content-center align-items-center" style="min-height: 400px;">
                            <div class="spinner-border text-primary" role="status">
                                <span class="visually-hidden">Cargando...</span>
                            </div>
                        </div>
                    }
                    else
                    {
                        <div class="table-responsive" style="max-height: 500px; overflow-y: auto;">
                            <table class="table table-striped table-hover table-bordered">
                                <thead class="table-dark sticky-top">
                                    <tr>
                                        <th>IdPersona</th>
                                        <th>Direccion</th>
                                        <th>FechaNacimiento</th>
                                        <th>Legajo</th>
                                        <th>Telefono</th>
                                        <th>TipoPersona</th>
                                        <th>Plan</th> <!-- CAMBIADO -->
                                    </tr>
                                </thead>
                                <tbody>
                                    @if (personas != null && personas.Any())
                                    {
                                        @foreach (var persona in personas)
                                        {
                                            var planDesc = planes?.FirstOrDefault(p => p.IdPlan == persona.IdPlan)?.Descripcion ?? "Sin plan";
                                            <tr @onclick="() => SelectPersona(persona)"
                                                class="@(selectedPersona?.IdPersona == persona.IdPersona ? "table-active" : "")"
                                                style="cursor: pointer;">
                                                <td>@persona.IdPersona</td>
                                                <td>@persona.Direccion</td>
                                                <td>@persona.FechaNacimiento.ToShortDateString()</td>
                                                <td>@persona.Legajo</td>
                                                <td>@persona.Telefono</td>
                                                <td>@persona.TipoPersona</td>
                                                <td>@planDesc</td> <!-- CAMBIADO -->
                                            </tr>
                                        }
                                    }
                                    else
                                    {
                                        <tr>
                                            <td colspan="7" class="text-center text-muted py-4">
                                                <i class="fas fa-inbox fa-2x mb-2"></i>
                                                <p class="mb-0">No hay personas registradas</p>
                                            </td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>

                        <div class="d-flex justify-content-start gap-2 mt-3 border-top pt-3">
                            <button class="btn btn-outline-primary" @onclick="RefreshPersonas">
                                <i class="fas fa-sync-alt me-2"></i>
                                Refrescar
                            </button>
                            <button class="btn btn-outline-danger"
                                    disabled="@(selectedPersona == null)"
                                    @onclick="EliminarPersona">
                                <i class="fas fa-trash-alt me-2"></i>
                                Eliminar
                            </button>
                            <button class="btn btn-outline-warning"
                                    disabled="@(selectedPersona == null)"
                                    @onclick="ModificarPersona">
                                <i class="fas fa-edit me-2"></i>
                                Modificar
                            </button>
                            <button class="btn btn-outline-success" @onclick="AgregarPersona">
                                <i class="fas fa-plus me-2"></i>
                                Agregar
                            </button>
                        </div>

                        @if (selectedPersona != null)
                        {
                            <div class="alert alert-info mt-3">
                                <strong>Persona seleccionada:</strong>
                                @selectedPersona.IdPersona - @selectedPersona.TipoPersona
                            </div>
                        }
                    }
                </div>
            </div>
        </div>
    </div>
</div>

@if (showDetalle)
{
    <PersonaDetalle Persona="@personaDetalle"
                    IsEditMode="@isEditMode"
                    OnSave="@HandleSave"
                    OnCancel="@HandleCancel" />
}

@if (showDeleteConfirm)
{
    <div class="modal fade show d-block" tabindex="-1" style="background-color: rgba(0,0,0,0.5);">
        <div class="modal-dialog modal-dialog-centered">
            <div class="modal-content">
                <div class="modal-header bg-danger text-white">
                    <h5 class="modal-title">
                        <i class="fas fa-exclamation-triangle me-2"></i>
                        Confirmar eliminación
                    </h5>
                    <button type="button" class="btn-close btn-close-white" @onclick="CancelDelete"></button>
                </div>
                <div class="modal-body">
                    <p class="mb-0">
                        ¿Está seguro que desea eliminar la persona con ID
                        <strong>@selectedPersona?.IdPersona</strong>?
                    </p>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="CancelDelete" disabled="@isDeleting">
                        Cancelar
                    </button>
                    <button type="button" class="btn btn-danger" @onclick="ConfirmDelete" disabled="@isDeleting">
                        @if (isDeleting)
                        {
                            <span class="spinner-border spinner-border-sm me-2"></span>
                        }
                        Eliminar
                    </button>
                </div>
            </div>
        </div>
    </div>
}

@code {
    private List<PersonaDTO>? personas;
    private PersonaDTO? selectedPersona;
    private PersonaDTO personaDetalle = new PersonaDTO();
    private bool loading = true;
    private bool showDetalle = false;
    private bool isEditMode = false;
    private bool showDeleteConfirm = false;
    private bool isDeleting = false;
    private string errorMessage = string.Empty;
    private string successMessage = string.Empty;

    private List<PlanDTO>? planes; // AGREGADO

    protected override async Task OnInitializedAsync()
    {
        await LoadPersonas();
    }

    private async Task LoadPersonas()
    {
        try
        {
            loading = true;
            errorMessage = string.Empty;
            personas = (await PersonaApiClient.GetAllAsync())?.ToList();
            planes = (await PlanApiClient.GetAllAsync())?.ToList(); // AGREGADO
            selectedPersona = null;
        }
        catch (Exception ex)
        {
            errorMessage = $"Error al cargar personas: {ex.Message}";
        }
        finally
        {
            loading = false;
        }
    }

    private void SelectPersona(PersonaDTO persona)
    {
        selectedPersona = selectedPersona?.IdPersona == persona.IdPersona ? null : persona;
    }

    private async Task RefreshPersonas()
    {
        await LoadPersonas();
        successMessage = "Lista actualizada correctamente";
    }

    private void AgregarPersona()
    {
        personaDetalle = new PersonaDTO
            {
                FechaNacimiento = DateTime.Now
            };
        isEditMode = false;
        showDetalle = true;
    }

    private async void ModificarPersona()
    {
        if (selectedPersona == null) return;

        try
        {
            var persona = await PersonaApiClient.GetAsync(selectedPersona.IdPersona);
            if (persona != null)
            {
                personaDetalle = persona;
                isEditMode = true;
                showDetalle = true;
                StateHasChanged();
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Error al cargar persona: {ex.Message}";
        }
    }

    private void EliminarPersona()
    {
        if (selectedPersona == null) return;
        showDeleteConfirm = true;
    }

    private async Task ConfirmDelete()
    {
        try
        {
            isDeleting = true;
            await PersonaApiClient.DeleteAsync(selectedPersona!.IdPersona);
            successMessage = $"Persona eliminada correctamente";
            showDeleteConfirm = false;
            selectedPersona = null;
            await LoadPersonas();
        }
        catch (Exception ex)
        {
            errorMessage = $"Error al eliminar persona: {ex.Message}";
        }
        finally
        {
            isDeleting = false;
        }
    }

    private void CancelDelete()
    {
        showDeleteConfirm = false;
    }

    private async Task HandleSave()
    {
        showDetalle = false;
        successMessage = isEditMode ? "Persona modificada correctamente" : "Persona agregada correctamente";
        await LoadPersonas();
    }

    private void HandleCancel()
    {
        showDetalle = false;
    }
}