@page "/poner-notas"
@layout MainLayoutDocente
@using API.DocentesCursos
@using API.Cursos
@using API.Personas
@using API.AlumnosInscripciones
@using API.Usuarios
@using DTOs
@inject IJSRuntime JSRuntime
@inject NavigationManager Navigation

<PageTitle>Poner Notas</PageTitle>

<div class="container-fluid">
    <div class="row">
        <div class="col-12">
            <div class="card shadow-sm">
                <div class="card-header bg-success text-white">
                    <h4 class="mb-0">
                        <i class="fas fa-pencil-alt me-2"></i>
                        Poner Notas
                    </h4>
                </div>
                <div class="card-body">
                    @if (!string.IsNullOrEmpty(errorMessage))
                    {
                        <div class="alert alert-danger alert-dismissible fade show" role="alert">
                            <i class="fas fa-exclamation-triangle me-2"></i>
                            @errorMessage
                            <button type="button" class="btn-close" @onclick="() => errorMessage = string.Empty"></button>
                        </div>
                    }

                    @if (loading)
                    {
                        <div class="text-center p-5">
                            <div class="spinner-border text-primary" role="status">
                                <span class="visually-hidden">Cargando...</span>
                            </div>
                            <p class="mt-3">Cargando cursos...</p>
                        </div>
                    }
                    else if (cursosProfesor != null && cursosProfesor.Any())
                    {
  
                        <div class="row mb-4">
                            <div class="col-md-8">
                                <label class="form-label fw-bold">Seleccione un Curso:</label>
                                <select class="form-select form-select-lg" @bind="cursoSeleccionadoId" @bind:after="CargarAlumnosPorCurso">
                                    <option value="0">-- Seleccione un curso --</option>
                                    @foreach (var curso in cursosProfesor)
                                    {
                                        <option value="@curso.IdCurso">@curso.Descripcion</option>
                                    }
                                </select>
                            </div>
                            <div class="col-md-4 d-flex align-items-end">
                                <button class="btn btn-primary w-100" @onclick="CargarAlumnosPorCurso" disabled="@(cursoSeleccionadoId == 0)">
                                    <i class="fas fa-filter me-2"></i>Filtrar Alumnos
                                </button>
                            </div>
                        </div>


                        @if (loadingAlumnos)
                        {
                            <div class="text-center p-3">
                                <div class="spinner-border text-success" role="status">
                                    <span class="visually-hidden">Cargando alumnos...</span>
                                </div>
                            </div>
                        }
                        else if (alumnosNota != null && alumnosNota.Any())
                        {
                            <div class="table-responsive">
                                <table class="table table-striped table-hover">
                                    <thead class="table-success">
                                        <tr>
                                            <th>Legajo</th>
                                            <th>Apellido y Nombre</th>
                                            <th>Nota</th>
                                            <th>Condición</th>
                                            <th class="text-center">Acciones</th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        @foreach (var alumno in alumnosNota)
                                        {
                                            <tr>
                                                <td>@alumno.Legajo</td>
                                                <td>@alumno.NombreCompleto</td>
                                                <td>
                                                    @if (alumno.Nota.HasValue)
                                                    {
                                                        <span class="badge @ObtenerBadgeNota(alumno.Nota.Value)">@alumno.Nota</span>
                                                    }
                                                    else
                                                    {
                                                        <span class="badge bg-secondary">Sin nota</span>
                                                    }
                                                </td>
                                                <td>
                                                    <span class="badge @ObtenerBadgeCondicion(alumno.Condicion)">@alumno.Condicion</span>
                                                </td>
                                                <td class="text-center">
                                                    <button class="btn btn-sm btn-warning" @onclick="() => AbrirModalNota(alumno)">
                                                        <i class="fas fa-edit me-1"></i>Poner Nota
                                                    </button>
                                                </td>
                                            </tr>
                                        }
                                    </tbody>
                                </table>
                            </div>
                        }
                        else if (cursoSeleccionadoId > 0)
                        {
                            <div class="alert alert-info">
                                <i class="fas fa-info-circle me-2"></i>
                                No hay alumnos inscritos en este curso.
                            </div>
                        }
                    }
                    else if (!loading)
                    {
                        <div class="alert alert-warning">
                            <i class="fas fa-exclamation-triangle me-2"></i>
                            No tiene cursos asignados.
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Modal para Poner Nota -->
@if (mostrarModal && alumnoSeleccionado != null)
{
    <div class="modal fade show d-block" tabindex="-1" style="background-color: rgba(0,0,0,0.5);">
        <div class="modal-dialog modal-dialog-centered">
            <div class="modal-content">
                <div class="modal-header bg-warning text-dark">
                    <h5 class="modal-title">
                        <i class="fas fa-edit me-2"></i>Poner Nota
                    </h5>
                    <button type="button" class="btn-close" @onclick="CerrarModal"></button>
                </div>
                <div class="modal-body">
                    <div class="mb-3">
                        <p><strong>Alumno:</strong> @alumnoSeleccionado.NombreCompleto</p>
                        <p><strong>Legajo:</strong> @alumnoSeleccionado.Legajo</p>
                        <p><strong>Curso:</strong> @cursosProfesor.FirstOrDefault(c => c.IdCurso == cursoSeleccionadoId)?.Descripcion</p>
                    </div>

                    <div class="mb-3">
                        <label class="form-label fw-bold">Nota (0-10):</label>
                        <input type="number"
                               class="form-control form-control-lg"
                               @bind="notaIngresada"
                               min="0"
                               max="10"
                               step="1"
                               placeholder="Ingrese la nota" />
                        @if (!string.IsNullOrEmpty(errorNota))
                        {
                            <div class="text-danger mt-2">
                                <small><i class="fas fa-exclamation-circle me-1"></i>@errorNota</small>
                            </div>
                        }
                    </div>

                    @if (notaIngresada.HasValue)
                    {
                        <div class="alert @(notaIngresada >= 6 ? "alert-success" : "alert-danger")">
                            <strong>Condición:</strong> @(notaIngresada >= 6 ? "Aprobado" : "Desaprobado")
                        </div>
                    }
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="CerrarModal">Cancelar</button>
                    <button type="button" class="btn btn-success" @onclick="GuardarNota" disabled="@guardandoNota">
                        @if (guardandoNota)
                        {
                            <span class="spinner-border spinner-border-sm me-2"></span>
                            <span>Guardando...</span>
                        }
                        else
                        {
                            <i class="fas fa-save me-2"></i>
                            <span>Guardar Nota</span>
                        }
                    </button>
                </div>
            </div>
        </div>
    </div>
}

@code {
    private int? usuarioId;
    private int? personaId;
    private string? nombreUsuario;
    private string? tipoPersona;
    private string errorMessage = "";

    private bool loading = true;
    private bool loadingAlumnos = false;
    private bool guardandoNota = false;

    private List<CursoDTO> cursosProfesor = new();
    private List<AlumnoNotaDTO> alumnosNota = new();

    private int cursoSeleccionadoId = 0;

    // Modal
    private bool mostrarModal = false;
    private AlumnoNotaDTO? alumnoSeleccionado = null;
    private int? notaIngresada = null;
    private string errorNota = "";

    protected override async Task OnInitializedAsync()
    {
        try
        {
            // Obtener datos del usuario desde localStorage
            tipoPersona = await JSRuntime.InvokeAsync<string>("localStorage.getItem", "tipoPersona");
            nombreUsuario = await JSRuntime.InvokeAsync<string>("localStorage.getItem", "nombreUsuario");
            var userIdStr = await JSRuntime.InvokeAsync<string>("localStorage.getItem", "usuarioId");
            var personaIdStr = await JSRuntime.InvokeAsync<string>("localStorage.getItem", "personaId");
            
            if (tipoPersona != "Docente")
            {
                Navigation.NavigateTo("/login");
                return;
            }

            if (int.TryParse(userIdStr, out int uid))
                usuarioId = uid;

            if (int.TryParse(personaIdStr, out int pid))
                personaId = pid;

            if (!personaId.HasValue)
            {
                errorMessage = "No se pudo obtener la información del docente.";
                loading = false;
                return;
            }

            await CargarCursosDocente();
        }
        catch (Exception ex)
        {
            errorMessage = $"Error al inicializar: {ex.Message}";
            loading = false;
        }
    }

    private async Task CargarCursosDocente()
    {
        try
        {
            loading = true;
            errorMessage = "";
            
            var docenteCursos = await DocenteCursoApiClient.GetDocenteCursoByCriteria(personaId.Value);

            if (docenteCursos != null && docenteCursos.Any())
            {
                cursosProfesor = new List<CursoDTO>();

                foreach (var dc in docenteCursos)
                {
                    var curso = await CursoApiClient.GetAsync(dc.IdCurso);
                    if (curso != null)
                    {
                        cursosProfesor.Add(curso);
                    }
                }

                if (!cursosProfesor.Any())
                {
                    errorMessage = "No se encontraron cursos válidos.";
                }
            }
            else
            {
                errorMessage = "No tiene cursos asignados.";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Error al cargar cursos: {ex.Message}";
        }
        finally
        {
            loading = false;
        }
    }

    private async Task CargarAlumnosPorCurso()
    {
        if (cursoSeleccionadoId == 0)
            return;

        try
        {
            loadingAlumnos = true;
            errorMessage = "";

            var personas = await PersonaApiClient.GetAllAsync();
            var alumnosInscripciones = await AlumnoInscripcionApiClient.GetAllAsync();
            var usuarios = await UsuarioApiClient.GetAllAsync();

            alumnosNota = (from persona in personas
                           join inscripcion in alumnosInscripciones on persona.IdPersona equals inscripcion.IdAlumno
                           join usuario in usuarios on persona.IdPersona equals usuario.IdPersona
                           where inscripcion.IdCurso == cursoSeleccionadoId
                           select new AlumnoNotaDTO
                               {
                                   IdInscripcion = inscripcion.IdInscripcion,
                                   IdCurso = inscripcion.IdCurso,
                                   Legajo = persona.Legajo,
                                   NombreCompleto = $"{usuario.Apellido}, {usuario.Nombre}",
                                   Nota = inscripcion.Nota,
                                   Condicion = inscripcion.Condicion
                               }).ToList();
        }
        catch (Exception ex)
        {
            errorMessage = $"Error al cargar alumnos: {ex.Message}";
        }
        finally
        {
            loadingAlumnos = false;
        }
    }

    private void AbrirModalNota(AlumnoNotaDTO alumno)
    {
        alumnoSeleccionado = alumno;
        notaIngresada = alumno.Nota;
        errorNota = "";
        mostrarModal = true;
    }

    private void CerrarModal()
    {
        mostrarModal = false;
        alumnoSeleccionado = null;
        notaIngresada = null;
        errorNota = "";
    }

    private async Task GuardarNota()
    {
        if (alumnoSeleccionado == null)
            return;

        errorNota = "";

        if (!notaIngresada.HasValue)
        {
            errorNota = "Debe ingresar una nota.";
            return;
        }

        if (notaIngresada < 0 || notaIngresada > 10)
        {
            errorNota = "La nota debe estar entre 0 y 10.";
            return;
        }

        try
        {
            guardandoNota = true;

            await AlumnoInscripcionApiClient.PonerNotaAsync(
                alumnoSeleccionado.IdInscripcion,
                alumnoSeleccionado.IdCurso,
                notaIngresada.Value
            );
            
            await CargarAlumnosPorCurso();

            CerrarModal();
        }
        catch (Exception ex)
        {
            errorNota = $"Error al guardar nota: {ex.Message}";
        }
        finally
        {
            guardandoNota = false;
        }
    }

    private string ObtenerBadgeNota(int nota)
    {
        if (nota >= 6) return "bg-success";
        if (nota >= 4) return "bg-warning";
        return "bg-danger";
    }

    private string ObtenerBadgeCondicion(string condicion)
    {
        return condicion switch
        {
            "Aprobado" => "bg-success",
            "Desaprobado" => "bg-danger",
            "Cursando" => "bg-info",
            _ => "bg-secondary"
        };
    }

    public class AlumnoNotaDTO
    {
        public int IdInscripcion { get; set; }
        public int IdCurso { get; set; }
        public int Legajo { get; set; }
        public string NombreCompleto { get; set; }
        public int? Nota { get; set; }
        public string Condicion { get; set; }
    }
}