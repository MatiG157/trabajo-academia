@using DTOs
@using API.Materias
@using API.Planes

<div class="modal fade show d-block" tabindex="-1" style="background-color: rgba(0,0,0,0.5);">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header bg-primary text-white">
                <h5 class="modal-title">
                    <i class="fas fa-book me-2"></i>
                    @(IsEditMode ? "Modificar Materia" : "Agregar Materia")
                </h5>
                <button type="button" class="btn-close btn-close-white" @onclick="OnCancel"></button>
            </div>
            <div class="modal-body">
                @if (loadingPlanes)
                {
                    <div class="text-center p-3">
                        <div class="spinner-border text-primary" role="status">
                            <span class="visually-hidden">Cargando planes...</span>
                        </div>
                    </div>
                }
                else
                {
                    <EditForm Model="@Materia" OnValidSubmit="@HandleSubmit">
                        <DataAnnotationsValidator />

                        <div class="mb-3">
                            <label class="form-label">Descripción</label>
                            <InputText class="form-control" @bind-Value="Materia.Descripcion" />
                            <ValidationMessage For="@(() => Materia.Descripcion)" class="text-danger" />
                        </div>

                        <div class="mb-3">
                            <label class="form-label">Horas Semanales</label>
                            <InputNumber class="form-control" @bind-Value="Materia.HsSemanales" />
                            <ValidationMessage For="@(() => Materia.HsSemanales)" class="text-danger" />
                        </div>

                        <div class="mb-3">
                            <label class="form-label">Horas Totales</label>
                            <InputNumber class="form-control" @bind-Value="Materia.HsTotales" />
                            <ValidationMessage For="@(() => Materia.HsTotales)" class="text-danger" />
                        </div>

                        <div class="mb-3">
                            <label class="form-label">Plan</label>
                            <InputSelect class="form-select" @bind-Value="Materia.IdPlan">
                                <option value="0">-- Seleccione un plan --</option>
                                @if (planes != null)
                                {
                                    @foreach (var plan in planes)
                                    {
                                        <option value="@plan.IdPlan">@plan.Descripcion</option>
                                    }
                                }
                            </InputSelect>
                            <ValidationMessage For="@(() => Materia.IdPlan)" class="text-danger" />
                        </div>

                        @if (!string.IsNullOrEmpty(ErrorMessage))
                        {
                            <div class="alert alert-danger">
                                <i class="fas fa-exclamation-triangle me-2"></i>@ErrorMessage
                            </div>
                        }

                        <div class="modal-footer border-0 px-0 pb-0">
                            <button type="button" class="btn btn-secondary" @onclick="OnCancel" disabled="@IsSaving">
                                Cancelar
                            </button>
                            <button type="submit" class="btn btn-primary" disabled="@IsSaving">
                                @if (IsSaving)
                                {
                                    <span class="spinner-border spinner-border-sm me-2"></span>
                                }
                                Aceptar
                            </button>
                        </div>
                    </EditForm>
                }
            </div>
        </div>
    </div>
</div>

@code {
    [Parameter]
    public MateriaDTO Materia { get; set; } = new MateriaDTO();

    [Parameter]
    public bool IsEditMode { get; set; } = false;

    [Parameter]
    public EventCallback OnSave { get; set; }

    [Parameter]
    public EventCallback OnCancel { get; set; }

    private bool IsSaving = false;
    private bool loadingPlanes = true;
    private string ErrorMessage = string.Empty;
    private List<PlanDTO>? planes;

    protected override async Task OnInitializedAsync()
    {
        await CargarPlanes();
    }

    private async Task CargarPlanes()
    {
        try
        {
            loadingPlanes = true;
            planes = (await PlanApiClient.GetAllAsync())?.ToList();
        }
        catch (Exception ex)
        {
            ErrorMessage = $"Error al cargar planes: {ex.Message}";
        }
        finally
        {
            loadingPlanes = false;
        }
    }

    private async Task HandleSubmit()
    {
        try
        {
            IsSaving = true;
            ErrorMessage = string.Empty;

            if (Materia.IdPlan == 0)
            {
                ErrorMessage = "Debe seleccionar un plan";
                IsSaving = false;
                return;
            }

            if (IsEditMode)
                await MateriaApiClient.UpdateAsync(Materia);
            else
                await MateriaApiClient.AddAsync(Materia);

            await OnSave.InvokeAsync();
        }
        catch (Exception ex)
        {
            ErrorMessage = $"Error al guardar: {ex.Message}";
        }
        finally
        {
            IsSaving = false;
        }
    }
}